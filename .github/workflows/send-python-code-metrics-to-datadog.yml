name: Send Python code metrics to Datadog

# A reusable workflow for Python services to send static code analysis metrics
# to Datadog.

on:
  workflow_call:
    inputs:
      paths:
        description: "Paths to analyze, separated by a space"
        default: "./src"
        type: string
      main_branch:
        description: "Default branch name of the repository"
        default: "main"
        type: string

jobs:
  send:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Compute raw code metrics
        id: compute_raw
        run: echo "RAW='poetry run radon raw ${{ inputs.paths }} -j'" >> $GITHUB_OUTPUT

      - name: Sum raw code metrics
        id: compute_raw_sum
        run: >
          echo "RAW_SUMMARY='echo ${{ steps.compute_raw.outputs.RAW }} | jq map(to_entries)
            | add
            | group_by(.key)
            | map({
                  key: .[0].key,
                  value: map(.value) | add
              })
            | from_entries
          '" >> $GITHUB_OUTPUT

      - name: Compute cyclomatic complexity metrics
        id: compute_cc
        run: echo "CC='poetry run radon cc ${{ inputs.paths }} -j'" >> $GITHUB_OUTPUT

      - name: Count number of files
        id: compute_cc_file_count
        run: echo "CC_FILE_COUNT='echo ${{ steps.compute_cc.outputs.CC }} | jq length'" >> $GITHUB_OUTPUT

      - name: Count number of functions
        id: compute_cc_function_count
        run: echo "CC_FUNCTION_COUNT='echo ${{ steps.compute_cc.outputs.CC }} | grep -o -c '\"type\": \"function\"'" >> $GITHUB_OUTPUT

      - name: Count number of classes
        id: compute_cc_class_count
        run: echo "CC_CLASS_COUNT='echo ${{ steps.compute_cc.outputs.CC }} | grep -o -c '\"type\": \"class\"'" >> $GITHUB_OUTPUT

      - name: Report metrics to Datadog
        uses: masci/datadog@v1
        if: always()
        with:
          api-key: ${{ secrets.DD_API_KEY }}
          metrics: |
            - type: "count"
              name: "properly.ci.code.metrics.loc"
              value: ${{ fromJSON( steps.compute_raw_sum.outputs.RAW_SUMMARY ).loc }}
              host: ${{ github.repository_owner }}
              tags:
                - "repository:${{ github.repository }}"
                - "workflow:${{ github.workflow }}"
                - "default_branch": ${{ github.ref_name == inputs.main_branch }}
            - type: "count"
              name: "properly.ci.code.metrics.sloc"
              value: ${{ fromJSON( steps.compute_raw_sum.outputs.RAW_SUMMARY ).sloc }}
              host: ${{ github.repository_owner }}
              tags:
                - "repository:${{ github.repository }}"
                - "workflow:${{ github.workflow }}"
                - "default_branch": ${{ github.ref_name == inputs.main_branch }}
            - type: "count"
              name: "properly.ci.code.metrics.lloc"
              value: ${{ fromJSON( steps.compute_raw_sum.outputs.RAW_SUMMARY ).lloc }}
              host: ${{ github.repository_owner }}
              tags:
                - "repository:${{ github.repository }}"
                - "workflow:${{ github.workflow }}"
                - "default_branch": ${{ github.ref_name == inputs.main_branch }}
            - type: "count"
              name: "properly.ci.code.metrics.file_count"
              value: ${{ steps.compute_cc_file_count.outputs.CC_FILE_COUNT }}
              host: ${{ github.repository_owner }}
              tags:
                - "repository:${{ github.repository }}"
                - "workflow:${{ github.workflow }}"
                - "default_branch": ${{ github.ref_name == inputs.main_branch }}
            - type: "count"
              name: "properly.ci.code.metrics.function_count"
              value: ${{ steps.compute_cc_function_count.outputs.CC_FUNCTION_COUNT }}
              host: ${{ github.repository_owner }}
              tags:
                - "repository:${{ github.repository }}"
                - "workflow:${{ github.workflow }}"
                - "default_branch": ${{ github.ref_name == inputs.main_branch }}
            - type: "count"
              name: "properly.ci.code.metrics.class_count"
              value: ${{ steps.compute_cc_class_count.outputs.CC_CLASS_COUNT }}
              host: ${{ github.repository_owner }}
              tags:
                - "repository:${{ github.repository }}"
                - "workflow:${{ github.workflow }}"
                - "default_branch": ${{ github.ref_name == inputs.main_branch }}
            - type: "count"
              name: "properly.ci.code.metrics.method_count"
              value: ${{ steps.compute_cc_method_count.outputs.CC_METHOD_COUNT }}
              host: ${{ github.repository_owner }}
              tags:
                - "repository:${{ github.repository }}"
                - "workflow:${{ github.workflow }}"
                - "default_branch": ${{ github.ref_name == inputs.main_branch }}
