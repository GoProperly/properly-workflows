name: Test & Deploy

on:
  workflow_call:
    inputs:
      python_version_file:
        description: "The location of .python-version file of the caller workflow repository"
        default: ".python-version"
        type: string
      default_branch:
        description: "The production branch of the caller workflow repository"
        default: "main"
        type: string
      working_directory:
        description: "The working directory of the caller workflow repository"
        default: "."
        type: string
      src_directory:
        description: "The src directory of the caller workflow repository"
        default: "./src"
        type: string
      staging_env_url:
        description: 'URL for the deployed staging env (default "")'
        type: string
      prod_env_url:
        description: 'URL for the deployed prod env (default "")'
        type: string
      deploy_staging:
        description: "A boolean value to run deploy to staging steps (default false)"
        type: boolean
      run_typecheck:
        description: "A boolean value to run typecheck step (default false)"
        type: boolean
      run_datadog_ci:
        description: "A boolean value to run datadog step (default false)"
        type: boolean
      run_static_metrics:
        description: "A boolean value to run static code analysis and report them to Datadog (default false)"
        type: boolean
      skip_domain_creation:
        description: "A boolean value to skip domain creation for legacy repos (default false)"
        type: boolean

jobs:
  python_version:
    uses: ./.github/workflows/python-version.yml
    with:
      python_version_file: ${{ inputs.python_version_file }}

  test_and_deploy:
    name: Test & Deploy
    needs: python_version
    runs-on: ubuntu-latest
    concurrency: test-deploy-${{ github.repository }}

    env:
      SLS_DEBUG: "*"

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}

    steps:
      - uses: actions/checkout@v3

      - uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # pin version for poetry as higher versions have PEP 440 versioning issues
      - name: Install poetry
        run: pipx install poetry==1.1.15

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.python_version.outputs.version }}
          cache: "poetry"

      # Poetry must explicitly be told to use the expected version https://github.com/actions/setup-python/issues/374
      - name: Install dependencies
        run: |
          poetry env use ${{ needs.python_version.outputs.version }}
          poetry config http-basic.properly "${{ secrets.PIP_GEMFURY_DEPLOY_TOKEN }}" NOPASS
          poetry install
          npm install

      - name: Lint
        run: poetry run inv lint

      - name: Typecheck
        if: inputs.run_typecheck
        run: poetry run inv typecheck

      - name: Run Tests
        run: poetry run inv test --junitxml="tests/results.xml"

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: "${{ inputs.working_directory }}/tests/*.xml"
          comment_mode: "always"

      - name: Upload metadata to Datadog
        if: inputs.run_datadog_ci
        run: poetry run inv datadog-ci
        env:
          DATADOG_API_KEY: ${{ secrets.DD_API_KEY }}

      - name: Start deployment (staging)
        id: deployment_staging
        if: ${{ github.ref == format('refs/heads/{0}', inputs.default_branch) && inputs.deploy_staging }}
        uses: bobheadxi/deployments@v1
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: staging

      - name: Create domain (staging)
        if: ${{ !inputs.skip_domain_creation && github.ref == format('refs/heads/{0}', inputs.default_branch) && inputs.deploy_staging }}
        run: npx sls create_domain --stage staging
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DD_API_KEY: ${{ secrets.DD_API_KEY }}

      - name: Deploy (staging)
        if: ${{ github.ref == format('refs/heads/{0}', inputs.default_branch) && inputs.deploy_staging }}
        run: poetry run inv deploy --stage staging
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DD_API_KEY: ${{ secrets.DD_API_KEY }}

      - name: Update deployment status (staging)
        if: ${{ always() && github.ref == format('refs/heads/{0}', inputs.default_branch) && inputs.deploy_staging }}
        uses: bobheadxi/deployments@v1
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env: ${{ steps.deployment_staging.outputs.env }}
          env_url: ${{ inputs.staging_env_url }}
          deployment_id: ${{ steps.deployment_staging.outputs.deployment_id }}

      - name: Start deployment (prod)
        id: deployment_prod
        if: ${{ github.ref == format('refs/heads/{0}', inputs.default_branch) }}
        uses: bobheadxi/deployments@v1
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: prod

      - name: Create domain (prod)
        if: ${{ !inputs.skip_domain_creation && github.ref == format('refs/heads/{0}', inputs.default_branch) }}
        run: npx sls create_domain --stage prod
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DD_API_KEY: ${{ secrets.DD_API_KEY }}

      - name: Deploy (prod)
        if: ${{ github.ref == format('refs/heads/{0}', inputs.default_branch) }}
        run: poetry run inv deploy --stage prod
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DD_API_KEY: ${{ secrets.DD_API_KEY }}

      - name: Update deployment status (prod)
        uses: bobheadxi/deployments@v1
        if: ${{ always() && github.ref == format('refs/heads/{0}', inputs.default_branch) }}
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env: ${{ steps.deployment_prod.outputs.env }}
          env_url: ${{ inputs.prod_env_url }}
          deployment_id: ${{ steps.deployment_prod.outputs.deployment_id }}

  send_code_metrics:
    name: Send Code Metrics
    needs: python_version
    runs-on: ubuntu-latest
    concurrency: test-deploy-${{ github.repository }}
    timeout-minutes: 10

    # if: ${{ inputs.run_static_metrics && github.ref == format('refs/heads/{0}', inputs.default_branch) }}
    if: ${{ inputs.run_static_metrics }}

    defaults:
      run:
        working-directory: ${{ inputs.working_directory }}

    steps:
      - uses: actions/checkout@v3

      - uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # pin version for poetry as higher versions have PEP 440 versioning issues
      - name: Install poetry
        run: pipx install poetry==1.1.15

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.python_version.outputs.version }}
          cache: "poetry"

      # Poetry must explicitly be told to use the expected version https://github.com/actions/setup-python/issues/374
      - name: Install dependencies
        run: |
          poetry env use ${{ needs.python_version.outputs.version }}
          poetry config http-basic.properly "${{ secrets.PIP_GEMFURY_DEPLOY_TOKEN }}" NOPASS
          poetry install
          npm install

      - name: Compute raw code metrics
        id: compute_raw
        run: echo "RAW='poetry run radon raw ${{ inputs.src_directory }} -j'" >> $GITHUB_OUTPUT

      - name: Sum raw code metrics
        id: compute_raw_sum
        run: >
          JQ_QUERY="map(to_entries) \
            | add \
            | group_by(.key) \
            | map({ \
                  key: .[0].key, \
                  value: map(.value) | add \
              }) \
            | from_entries"
          RAW_SUMMARY=$(eval "echo ${{ steps.compute_raw.outputs.RAW }} | jq ${JQ_QUERY}")
          echo "RAW_SUMMARY=${RAW_SUMMARY}" >> $GITHUB_OUTPUT
          echo ::debug::${RAW_SUMMARY}

      - name: Compute cyclomatic complexity metrics
        id: compute_cc
        run: echo "CC='poetry run radon cc ${{ inputs.src_directory }} -j'" >> $GITHUB_OUTPUT

      - name: Count number of files
        id: compute_cc_file_count
        run: >
          CC_FILE_COUNT=$(eval "echo ${{ steps.compute_cc.outputs.CC }} | jq length")
          echo "CC_FILE_COUNT=${CC_FILE_COUNT}" >> $GITHUB_OUTPUT
          echo ::debug::${CC_FILE_COUNT}

      - name: Count number of functions
        id: compute_cc_function_count
        run: >
          CC_FUNCTION_COUNT=$(eval "echo ${{ steps.compute_cc.outputs.CC }} | grep -o -c \"function\"")
          echo "CC_FUNCTION_COUNT=${CC_FUNCTION_COUNT}" >> $GITHUB_OUTPUT
          echo ::debug::${CC_FUNCTION_COUNT}

      - name: Count number of classes
        id: compute_cc_class_count
        run: >
          CC_CLASS_COUNT=$(eval "echo ${{ steps.compute_cc.outputs.CC }} | grep -o -c \"class\"")
          echo "CC_CLASS_COUNT=${CC_FILE_COUNT}" >> $GITHUB_OUTPUT
          echo ::debug::${CC_CLASS_COUNT}

      - name: Count number of methods
        id: compute_cc_method_count
        run: >
          CC_METHOD_COUNT=$(eval "echo ${{ steps.compute_cc.outputs.CC }} | grep -o -c \"method\"")
          echo "CC_METHOD_COUNT=${CC_METHOD_COUNT}" >> $GITHUB_OUTPUT
          echo ::debug::${CC_METHOD_COUNT}

      - name: Report metrics to Datadog
        uses: masci/datadog@v1
        with:
          api-key: ${{ secrets.DD_API_KEY }}
          metrics: |
            - type: "count"
              name: "properly.ci.code.metrics.loc"
              value: ${{ fromJSON( steps.compute_raw_sum.outputs.RAW_SUMMARY ).loc }}
              host: ${{ github.repository_owner }}
              tags:
                - "repository:${{ github.repository }}"
                - "workflow:${{ github.workflow }}"
                - "default_branch": ${{ github.ref_name == inputs.main_branch }}
            - type: "count"
              name: "properly.ci.code.metrics.sloc"
              value: ${{ fromJSON( steps.compute_raw_sum.outputs.RAW_SUMMARY ).sloc }}
              host: ${{ github.repository_owner }}
              tags:
                - "repository:${{ github.repository }}"
                - "workflow:${{ github.workflow }}"
                - "default_branch": ${{ github.ref_name == inputs.main_branch }}
            - type: "count"
              name: "properly.ci.code.metrics.lloc"
              value: ${{ fromJSON( steps.compute_raw_sum.outputs.RAW_SUMMARY ).lloc }}
              host: ${{ github.repository_owner }}
              tags:
                - "repository:${{ github.repository }}"
                - "workflow:${{ github.workflow }}"
                - "default_branch": ${{ github.ref_name == inputs.main_branch }}
            - type: "count"
              name: "properly.ci.code.metrics.file_count"
              value: ${{ steps.compute_cc_file_count.outputs.CC_FILE_COUNT }}
              host: ${{ github.repository_owner }}
              tags:
                - "repository:${{ github.repository }}"
                - "workflow:${{ github.workflow }}"
                - "default_branch": ${{ github.ref_name == inputs.main_branch }}
            - type: "count"
              name: "properly.ci.code.metrics.function_count"
              value: ${{ steps.compute_cc_function_count.outputs.CC_FUNCTION_COUNT }}
              host: ${{ github.repository_owner }}
              tags:
                - "repository:${{ github.repository }}"
                - "workflow:${{ github.workflow }}"
                - "default_branch": ${{ github.ref_name == inputs.main_branch }}
            - type: "count"
              name: "properly.ci.code.metrics.class_count"
              value: ${{ steps.compute_cc_class_count.outputs.CC_CLASS_COUNT }}
              host: ${{ github.repository_owner }}
              tags:
                - "repository:${{ github.repository }}"
                - "workflow:${{ github.workflow }}"
                - "default_branch": ${{ github.ref_name == inputs.main_branch }}
            - type: "count"
              name: "properly.ci.code.metrics.method_count"
              value: ${{ steps.compute_cc_method_count.outputs.CC_METHOD_COUNT }}
              host: ${{ github.repository_owner }}
              tags:
                - "repository:${{ github.repository }}"
                - "workflow:${{ github.workflow }}"
                - "default_branch": ${{ github.ref_name == inputs.main_branch }}
